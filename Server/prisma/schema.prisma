// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

enum Role {
  USER
  MEMBER
  ADMIN
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  emailVerifiedAt DateTime?
  passwordHash    String
  role            UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  memberships   Membership[]
  payments      Payment[]
  internships   InternshipApplication[]
  startups      Startup[]
  webinarApps   WebinarApplication[]
  tickets       Ticket[]
  projects      Project[]
  notifications Notification[]
  auditLogs     AuditLog[]
  articles      Article[]      // Added this line

  isActive Boolean @default(true)

  @@index([role])
}

model Profile {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String?
  phone     String?
  education String?
  skills    String[] @default([])
  resumeUrl String?
  avatarUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  status    String    @default("Active")
  startDate DateTime  @default(now())
  endDate   DateTime?

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId, planId])
  @@map("Memberships")
}

model Plan {
  id           Int          @id @default(autoincrement())
  name         String
  price        Float
  billingCycle BillingCycle
  memberships  Membership[]

  @@map("Plans")
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  currency  String   @default("ETB")
  status    String   @default("Pending")
  invoiceNo String   @unique
  createdAt DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id])
  ticket Ticket[]

  @@index([userId])
  @@map("Payments")
}

model InternshipApplication {
  id         Int      @id @default(autoincrement())
  userId     Int
  resume     String?
  skills     String?
  motivation String?
  status     String   @default("Draft")
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("InternshipApplications")
}

model Startup {
  id       Int     @id @default(autoincrement())
  userId   Int
  name     String
  logo     String?
  website  String?
  pitch    String?
  stage    String?
  traction String?
  deck     String?
  demoLink String?
  tags     String?
  status   String  @default("Draft")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@map("Startups")
}

model Webinar {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  schedule    DateTime
  capacity    Int?
  price       Float?
  status      String   @default("Upcoming")

  applications WebinarApplication[]
  tickets      Ticket[]

  @@map("Webinars")
}

model WebinarApplication {
  id        Int           @id @default(autoincrement())
  webinarId Int
  userId    Int
  status    WebinarStatus @default(Applied)
  createdAt DateTime      @default(now())

  webinar Webinar @relation(fields: [webinarId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([webinarId, userId])
  @@map("WebinarApplications")
}

model Ticket {
  id        Int     @id @default(autoincrement())
  webinarId Int
  userId    Int
  qrCode    String?
  paymentId Int?

  webinar Webinar  @relation(fields: [webinarId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([webinarId, userId])
  @@map("Tickets")
}

model Project {
  id          Int           @id @default(autoincrement())
  userId      Int
  title       String
  slug        String        @unique
  summary     String?
  description String?
  teamName    String
  teamMembers String?
  demoLink    String?
  repoLink    String?
  coverImage  String?
  country     String?
  stack       String[]      @default([])
  status      ProjectStatus @default(PENDING)
  featuredAt  DateTime?
  submittedAt DateTime?
  modNotes    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  media       ProjectMedia[]
  tags        ProjectTag[]
  flags       ProjectFlag[]

  @@index([userId, status])
  @@index([status, featuredAt])
  @@index([slug])
  @@map("Projects")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  isReade   Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("Notifications")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  ipAddress String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("AuditLogs")
}

enum UserRole {
  ADMIN
  USER
  MEMBER
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum WebinarStatus {
  Applied
  Paid
  Confirmed
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  summary     String?
  authorId    Int
  categoryId  Int?
  publishedAt DateTime?
  status      ArticleStatus @default(DRAFT)
  featuredImage String?
  metaTitle   String?
  metaDescription String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author      User      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        ArticleTag[]

  @@index([status, publishedAt])
  @@index([slug])
  @@map("Articles")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  
  articles    Article[]

  @@map("Categories")
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  
  articleTags ArticleTag[]
  projectTags ProjectTag[]

  @@map("Tags")
}

model ArticleTag {
  articleId   Int
  tagId       Int

  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("ArticleTags")
}

model ProjectTag {
  projectId   Int
  tagId       Int

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
  @@map("ProjectTags")
}

model ProjectMedia {
  id          Int       @id @default(autoincrement())
  projectId   Int
  url         String
  type        MediaType @default(IMAGE)
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ProjectMedia")
}

model ProjectFlag {
  id          Int      @id @default(autoincrement())
  projectId   Int
  userId      Int
  reason      String
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ProjectFlags")
}

enum ArticleStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  SUBMITTED
  APPROVED
  FEATURED
  REJECTED
  CHANGES_REQUESTED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}
